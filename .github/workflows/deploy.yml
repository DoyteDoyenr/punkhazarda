name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  IMAGE_NAME: back-cogna

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure gcloud
        run: |
          gcloud config set project $PROJECT_ID
          gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA \
                       -t gcr.io/$PROJECT_ID/$IMAGE_NAME:latest .

      - name: Push Docker image to GCR
        run: |
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest

      - name: Get GKE cluster credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE

      - name: Deploy Postgres
        run: |
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-test-deployment.yaml
          kubectl rollout status deployment/postgres --timeout=300s
          kubectl rollout status deployment/postgres-test --timeout=300s

      - name: Deploy Back Cogna
        run: |
          kubectl apply -f k8s/back-cogna-deployment.yaml
          kubectl set image deployment/back-cogna back-cogna=gcr.io/$PROJECT_ID/$IMAGE_NAME:$GITHUB_SHA
          kubectl rollout status deployment/back-cogna --timeout=300s

      - name: Show deployment status
        run: |
          echo "=== PODS ==="
          kubectl get pods
          echo "=== SERVICES ==="
          kubectl get services
          echo "=== DEPLOYMENTS ==="
          kubectl get deployments